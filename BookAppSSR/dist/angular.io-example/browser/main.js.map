{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/book-detail/book-detail.component.ts","./src/app/book-detail/book-detail.component.html","./src/app/directives/appShellNoRender.directive.ts","./src/app/directives/appShellRender.directive.ts","./src/app/directives/index.ts","./src/app/resolver/book.resolver.ts","./src/app/top-bar/top-bar.component.ts","./src/app/top-bar/top-bar.component.html","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n}\r\n\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/","<app-top-bar></app-top-bar>\r\n\r\n<div class=\"container\">\r\n  <router-outlet></router-outlet>\r\n</div>\r\n\r\n<!-- \r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n-->","import { NgModule } from '@angular/core';\r\nimport { BrowserModule, BrowserTransferStateModule } from '@angular/platform-browser';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { TopBarComponent } from './top-bar/top-bar.component';\r\nimport { BookDetailComponent } from './book-detail/book-detail.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AppShellNoRenderDirective, AppShellRenderDirective } from './directives';\r\nimport { BookResolver } from './resolver/book.resolver';\r\n\r\n@NgModule({\r\n  imports: [\r\n    BrowserModule.withServerTransition({ appId: 'serverApp' }),\r\n    BrowserTransferStateModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forRoot([\r\n      { path: ':bookId', component: BookDetailComponent, resolve: { book: BookResolver } },\r\n    ], {\r\n      initialNavigation: 'enabledBlocking'\r\n    })\r\n  ],\r\n  declarations: [\r\n    AppComponent,\r\n    TopBarComponent,\r\n    BookDetailComponent,\r\n    AppShellRenderDirective,\r\n    AppShellNoRenderDirective\r\n  ],\r\n  bootstrap: [\r\n    AppComponent\r\n  ],\r\n  providers: [\r\n    BookResolver\r\n  ]\r\n})\r\nexport class AppModule { }\r\n\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/","import { Component, OnInit } from '@angular/core';\nimport { Meta } from '@angular/platform-browser';\nimport { ActivatedRoute } from '@angular/router';\nimport { Book } from '../books';\n\n@Component({\n  selector: 'book-detail',\n  templateUrl: './book-detail.component.html'\n})\nexport class BookDetailComponent implements OnInit {\n  book: Book = null;\n  isbn: string = null;\n\n  constructor(private route: ActivatedRoute, private meta: Meta) { }\n\n  ngOnInit(): void {\n    const bookData = this.route.snapshot.data['book']; // api is already called in book.resolver, this is the api respopnse\n    this.book = bookData['ISBN:' + this.route.snapshot.paramMap.get('bookId')];\n    this.isbn = this.route.snapshot.paramMap.get('bookId');\n\n    // these are search engine tags\n    this.meta.addTag({ name: 'title', content: this.book.title });\n    this.meta.addTag({ name: 'description', content: this.book.title });\n\n    // these are social media open graph tags\n    this.meta.addTag({ name: 'og:title', content: this.book.title });\n    this.meta.addTag({ name: 'og:description', content: this.book.title });\n    this.meta.addTag({ name: 'og:image', content: this.book.cover.small });\n    this.meta.addTag({ name: 'og:image:alt', content: this.book.title });\n\n    // ... there are many other tags, best is to look at what popular site uses\n  }\n\n  // This button is not interactable in server mode and only interactable in client mode\n  clickedTestButton() {\n    console.log('Clicked test button');\n  }\n\n  // These lifecycle hooks are all called once in SSR mode and once in client mode (browser)\n\n  // ngOnInit() {\n  //   if (isPlatformServer(this.platformId)) {\n  //     // server mode\n  //     console.log('this gets called in server');\n  //   } else {\n  //     // client mode\n  //     console.log('this gets called in browser');\n  //   }\n  // }\n\n  // ngAfterContentInit() {\n  //   console.log('ngAfterContentInit');\n  // }\n\n  // ngAfterViewInit()\t{\n  //   console.log('ngAfterViewInit');\n  // }\n\n  // ngOnDestroy()\t{\n  //   console.log('ngOnDestroy');\n  // }\n\n}\n","<p>Book Details</p>\n\n<img src=\"{{book.cover.medium}}\" alt=\"{{book.title}}\" />\n<h1>Title: <span itemprop=\"name\">{{ book.title }}</span></h1>\n<h2>Author: <span itemprop=\"author\">{{ book?.authors[0]?.name }}</span></h2>\n<p>Number of Pages: <span itemprop=\"numberOfPages\">{{ book.number_of_pages }}</span></p>\n<p>ISBN: <span itemprop=\"isbn\">{{ isbn }}</span></p>\n\n<p>This button is only interactable in browser mode</p>\n<button (click)=\"clickedTestButton()\">Test Button</button>\n\n<p *appShellNoRender>This shows up in client mode only</p>\n<p *appShellRender>This shows up in server mode only</p>\n","import { isPlatformServer } from \"@angular/common\";\nimport { Directive, Inject, OnInit, PLATFORM_ID, TemplateRef, ViewContainerRef } from \"@angular/core\";\n\n@Directive({\n  selector: '[appShellNoRender]'\n})\nexport class AppShellNoRenderDirective implements OnInit {\n\n  constructor(\n    private viewContainer: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    @Inject(PLATFORM_ID) private platformId) {}\n        \n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.viewContainer.clear();\n    } else {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n    }\n  }\n}","import { isPlatformServer } from \"@angular/common\";\nimport { Directive, Inject, OnInit, PLATFORM_ID, TemplateRef, ViewContainerRef } from \"@angular/core\";\n\n@Directive({\n  selector: '[appShellRender]'\n})\nexport class AppShellRenderDirective implements OnInit {\n\n  constructor(\n    private viewContainer: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    @Inject(PLATFORM_ID) private platformId) {}\n        \n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n    } else {\n      this.viewContainer.clear();\n    }\n  }\n}","export * from './appShellRender.directive';\nexport * from './appShellNoRender.directive';","import {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {isPlatformServer} from '@angular/common';\nimport {makeStateKey, StateKey, TransferState} from '@angular/platform-browser';\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router';\nimport { catchError, filter, Observable, of, tap } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable()\nexport class BookResolver implements Resolve<any> {\n\n  constructor(private http: HttpClient, private transferState: TransferState, @Inject(PLATFORM_ID) private platformId) {}\n\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n\n    const bookId = route.params['bookId'];\n    const BOOK_KEY = makeStateKey<any>('book-' + bookId);\n    console.log(BOOK_KEY);\n\n    if (isPlatformServer(this.platformId)) {\n      console.log('server load book');\n      return this.getBook(BOOK_KEY, bookId);\n    } else {\n      if (this.transferState.hasKey(BOOK_KEY)) {\n        console.log('client get book');\n        const book = this.transferState.get<any>(BOOK_KEY, null);\n        this.transferState.remove(BOOK_KEY);\n        return of(book);\n      } else {\n        console.log('client load book');\n        return this.getBook(BOOK_KEY, bookId);\n      }\n    }\n  }\n\n  getBook(key: StateKey<any>, isbn?: string) {\n    if (!isbn) {\n      return of();\n    }\n\n    return this.http.get('https://openlibrary.org/api/books?bibkeys=ISBN:' + isbn + '&jscmd=data&format=json')\n      .pipe(\n        catchError(err => of()),\n        tap(book => {\n          this.transferState.set(key, book);\n        })\n      );\n  }\n}","import { isPlatformBrowser } from '@angular/common';\r\nimport { Component, Inject, PLATFORM_ID } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-top-bar',\r\n  templateUrl: './top-bar.component.html',\r\n  styleUrls: ['./top-bar.component.css']\r\n})\r\nexport class TopBarComponent {\r\n  pageState: string;\r\n\r\n  constructor(@Inject(PLATFORM_ID) private platformId: any) { }\r\n\r\n  ngOnInit(): void {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      this.pageState = 'Client Mode';\r\n    } else {\r\n      this.pageState = 'SSR Mode';\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/","<a [routerLink]=\"['/']\">\r\n  <h1>SSR Example</h1>\r\n</a>\r\n\r\n<a class=\"button fancy-button\">{{ pageState }}</a>\r\n\r\n<!-- \r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n-->","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nfunction bootstrap() {\r\n     platformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n   };\r\n\r\n\r\nif (document.readyState === 'complete') {\r\n  bootstrap();\r\n} else {\r\n  document.addEventListener('DOMContentLoaded', bootstrap);\r\n}\r\n\r\n\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/"],"names":[],"sourceRoot":"webpack:///"}